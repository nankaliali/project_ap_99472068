# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'choosefood.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from choosefood import ChooseFood
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore

class ReadOnly(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        return
from Cart_selenium import Ui_CartWindow

class Ui_ChooseFoodWindow(QMainWindow):
    '''def showServiceWindow(self, ServiceWindow, ChooseFoodWindow):
        ServiceWindow.show()
        self.hidesecend(ChooseFoodWindow)

    def hidesecend(self, secend_w):
        secend_w.hide()'''
    def instance(self):
        pass

    def check_exist_order_in_date(self):
        import json

        date = str(self.calendarWidget.selectedDate().toPyDate())
        date = date.split('-')
        selected_date = str(ChooseFood.tabdil_miladi_be_shamsi(int(date[2]), int(date[1]), int(date[0])))
        selected_date = selected_date.split('/')
        selected_date = '.'.join(selected_date)
        try:
            a_file = open(f"F:\\project_ap_99472068\\orders\\{self.user_name}\\{selected_date}.json", "r")
            json_object = json.load(a_file)
            a_file.close()
            self.opencartwindow(json_object)

        except:
            self.show_error("There are no orders on this date!",QtWidgets.QMessageBox.Warning, self.user_name)

    def opencartwindow(self,information):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_CartWindow()
        self.ui.setupUi(self.window)
        date = str(self.calendarWidget.selectedDate().toPyDate())
        date = date.split('-')
        self.ui.read_inforamtion_file_ordeer(information)
        self.ui.initialize_information(self.user_name, date)
        self.window.show()



    def set_user_name(self, user_name):
        self.user_name = user_name

    def setupUi(self, ChooseFoodWindow):

        ChooseFoodWindow.setObjectName("ChooseFoodWindow")
        ChooseFoodWindow.resize(800, 781)
        self.centralwidget = QtWidgets.QWidget(ChooseFoodWindow)
        self.centralwidget.setObjectName("centralwidget")


        font = QtGui.QFont()
        font.setPointSize(16)
        self.calendarWidget = QtWidgets.QCalendarWidget(self.centralwidget)
        self.calendarWidget.setGeometry(QtCore.QRect(30, 0, 411, 221))
        self.calendarWidget.setObjectName("calendarWidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(40, 289, 700, 350))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget.setFont(font)
        self.tableWidget.setObjectName("listfood_Widget")
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.centralwidget, clicked = lambda :self.print_date())
        self.commandLinkButton.setGeometry(QtCore.QRect(450, 150, 241, 71))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setPointSize(16)

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(40, 240, 700, 41))
        self.lineEdit.setText("")
        self.lineEdit.setMaxLength(20)
        self.lineEdit.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit.setObjectName("lineEdit")



        self.commandLinkButton.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/date.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.commandLinkButton.setIcon(icon)
        self.commandLinkButton.setIconSize(QtCore.QSize(60, 60))
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.commandLinkButton_2 = QtWidgets.QCommandLinkButton(self.centralwidget, clicked = lambda : self.add_to_cart())
        self.commandLinkButton_2.setGeometry(QtCore.QRect(520, 650, 220, 70))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(16)
        self.commandLinkButton_2.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/add-to-cart.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.commandLinkButton_2.setIcon(icon1)
        self.commandLinkButton_2.setIconSize(QtCore.QSize(60, 60))
        self.commandLinkButton_2.setObjectName("commandLinkButton_2")
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(16)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon/shopping-cart.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)

        self.commandLinkButton_4 = QtWidgets.QCommandLinkButton(self.centralwidget, clicked = lambda : self.check_exist_order_in_date())
        self.commandLinkButton_4.setGeometry(QtCore.QRect(710, 10, 81, 71))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(16)
        self.commandLinkButton_4.setFont(font)
        self.commandLinkButton_4.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon/shopping-cart (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.commandLinkButton_4.setIcon(icon3)
        self.commandLinkButton_4.setIconSize(QtCore.QSize(60, 60))
        self.commandLinkButton_4.setObjectName("commandLinkButton_4")

        ChooseFoodWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ChooseFoodWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        ChooseFoodWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ChooseFoodWindow)
        self.statusbar.setObjectName("statusbar")
        ChooseFoodWindow.setStatusBar(self.statusbar)

        self.retranslateUi(ChooseFoodWindow)
        QtCore.QMetaObject.connectSlotsByName(ChooseFoodWindow)

    def retranslateUi(self, ChooseFoodWindow):
        _translate = QtCore.QCoreApplication.translate
        ChooseFoodWindow.setWindowTitle(_translate("ChooseFoodWindow", "ChooseFoodWindow"))
        self.commandLinkButton.setText(_translate("ChooseFoodWindow", "Show Food"))
        self.commandLinkButton_2.setText(_translate("ChooseFoodWindow", "Add to Cart"))

    @staticmethod
    def show_error(message, type_mesasge, user_name):

        msg = QtWidgets.QMessageBox()
        msg.setIcon(type_mesasge)
        msg.setText(f"Hello {user_name}")
        msg.setInformativeText(message)
        msg.setWindowTitle("Message")
        msg.exec_()


    def add_to_cart(self):
        x = 1
        list_selected_food_with_numbers = []
        while x <= self.count_row:
            if self.tableWidget.item(x,3).text() == '':
                list_selected_food_with_numbers.append((self.tableWidget.item(x,0).text(), 0))
            else:
                list_selected_food_with_numbers.append((self.tableWidget.item(x,0).text(), int(self.tableWidget.item(x,3).text())))
            x+=1

        for food, number in list_selected_food_with_numbers:
            try:
                self.choosefood_obj.select_food(food, number)
                self.update_table_widget()
            except Exception as exc:
                self.show_error(str(exc),QtWidgets.QMessageBox.Critical,self.user_name)




    def update_table_widget(self):
        import os.path
        import json
        date = str(self.calendarWidget.selectedDate().toPyDate())
        date = date.split('-')

        selected_date = str(ChooseFood.tabdil_miladi_be_shamsi(int(date[2]), int(date[1]), int(date[0])))
        selected_date = selected_date.split('/')
        choosefood_obj = ChooseFood(int(selected_date[2]), int(selected_date[1]), int(selected_date[0]),
                                         self.user_name)

        if choosefood_obj.check_the_expiratio_date():
            name_file = '.'.join(selected_date)
            if os.path.exists(f"F:\\project_ap_99472068\\Food_information\\{name_file}.json") == True:
                a_file = open(f"F:\\project_ap_99472068\\Food_information\\{name_file}.json", "r")
                information = json.load(a_file)
                a_file.close()
        index = 1
        for key in information.keys():
            item = QtWidgets.QTableWidgetItem(key)
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(index, 0, item)
            item = QtWidgets.QTableWidgetItem(f"{information[key]['cost_food']}")
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(index, 1, item)
            item = QtWidgets.QTableWidgetItem(f"{information[key]['number_of_foods_available']}")
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(index, 2, item)
            item = QtWidgets.QTableWidgetItem(f"")
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(index, 3, item)

            index += 1
        self.tableWidget.setColumnWidth(0, 100)
        self.tableWidget.setColumnWidth(1, 150)
        self.tableWidget.setColumnWidth(2, 180)
        self.tableWidget.setColumnWidth(3, 250)



    def display_food(self, information):
        self.count_row = len(information)
        self.tableWidget.setRowCount(len(information) + 1)
        self.tableWidget.setColumnCount(4)
        item = QtWidgets.QTableWidgetItem(f"Name Food")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(0, 0,QtWidgets.QTableWidgetItem(item))
        #self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers) #&&&&
        item = QtWidgets.QTableWidgetItem(f"Price of each food")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem(item))
        item = QtWidgets.QTableWidgetItem(f"Number of available")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(0, 2, QtWidgets.QTableWidgetItem(item))
        item = QtWidgets.QTableWidgetItem("How many meals do you want?")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(0, 3, QtWidgets.QTableWidgetItem(item))
        readonly = ReadOnly(self)
        self.tableWidget.setItemDelegateForColumn(0,readonly)
        self.tableWidget.setItemDelegateForColumn(1,readonly)
        self.tableWidget.setItemDelegateForColumn(2,readonly)

        index = 1
        for key in information.keys():
            item = QtWidgets.QTableWidgetItem(key)
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(index, 0, item)
            item = QtWidgets.QTableWidgetItem(f"{information[key]['cost_food']}")
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(index, 1, item)
            item = QtWidgets.QTableWidgetItem(f"{information[key]['number_of_foods_available']}")
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(index, 2, item)
            item = QtWidgets.QTableWidgetItem(f"")
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(index, 3, item)

            index += 1
        self.tableWidget.setColumnWidth(0, 100)
        self.tableWidget.setColumnWidth(1, 150)
        self.tableWidget.setColumnWidth(2, 180)
        self.tableWidget.setColumnWidth(3, 250)
        self.show_error("Please write the number of foods you want to buy in the desired column.", QtWidgets.QMessageBox.Information, self.user_name)



    def print_date(self):
        import os.path
        import json
        date = str(self.calendarWidget.selectedDate().toPyDate())
        date = date.split('-')
        selected_date = str(ChooseFood.tabdil_miladi_be_shamsi(int(date[2]), int(date[1]),int(date[0])))
        selected_date = selected_date.split('/')
        self.choosefood_obj = ChooseFood(int(selected_date[2]), int(selected_date[1]), int(selected_date[0]), self.user_name)

        if self.choosefood_obj.check_the_expiratio_date() :
            name_file = '.'.join(selected_date)
            if os.path.exists(f"F:\\project_ap_99472068\\Food_information\\{name_file}.json") == True :
                a_file = open(f"F:\\project_ap_99472068\\Food_information\\{name_file}.json", "r")
                json_object = json.load(a_file)
                a_file.close()
                self.display_food(json_object)
            else:
                self.show_error("We have no food at this time", QtWidgets.QMessageBox.Information, self.user_name)

        else:
            self.show_error("your selected date belongs to the past!",QtWidgets.QMessageBox.Critical, self.user_name)





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ChooseFoodWindow = QtWidgets.QMainWindow()
    ui = Ui_ChooseFoodWindow()
    ui.setupUi(ChooseFoodWindow)
    ChooseFoodWindow.show()
    sys.exit(app.exec_())
