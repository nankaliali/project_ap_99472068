# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os.path
import json
from PyQt5 import QtCore, QtGui, QtWidgets


##-----------------------------------------------------------------------------------------------------


class LoginAdmin:

    def __init__(self, user_name, password):
        self.user_name = user_name
        self.password = password


    @property
    def user_name(self):
        return self._user_name

    @property
    def password(self):
        return self._password

    @user_name.setter
    def user_name(self,val):

        self._user_name = val


    @password.setter
    def password(self,val):
        self._password = val

    def correct_username_password(self):
        import os.path
        import json

        try:
            with open(f"F:\\project_ap_99472068\\Users_information\\admin\\{self.user_name}.json") as outfile:
                data = json.load(outfile)
        except:
            return f"{self.user_name} doesn't exist"

        correct_password = data["password"]
        if self.password == correct_password:
            return True
        return "password is not correct!"




    def __repr__(self):
        return f"LoginAdmin(" \
               f"user_name: '{self.user_name}', " \
               f"password: '{self.password}'" \
               f")"

#-----------------------------------------------------------------------------------------------------

class LoginCustomer(LoginAdmin):

    def __init__(self, user_name, password):
        super().__init__(user_name, password)

    def correct_username_password(self):
        import os.path
        import json


        try:
            with open(f"F:\\project_ap_99472068\\Users_information\\customer\\{self.user_name}.json") as outfile:
                data = json.load(outfile)
        except:
            return f"{self.user_name} doesn't exist"

        correct_password = data["password"]
        if self.password == correct_password:
            return True
        return "password is not correct!"


    def __repr__(self):
        return f"LoginCustomer(user_name: '{self.user_name}', password:'{self.password}')"

#-----------------------------------------------------------------------------------------------------
from ServiceWindow import Ui_ServiceWindow
from Create_Account_Customer_last import Ui_CreateAccountCustomerWindow
from adminWindow import Ui_adminWindow

class Ui_LoginWindow(object):


    def open_Create_Account_Customer_window(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_CreateAccountCustomerWindow()
        self.ui.setupUi(self.window)
        self.window.show()
        self.ui.show_error("Please Enter your information!", QtWidgets.QMessageBox.Information)


    def open_windowadmin(self):
        self.window = QtWidgets.QMainWindow()
        ui = Ui_adminWindow()
        ui.setupUi(self.window)
        ui.set_user_name(self.user_name)
        ui.set_information_admin()
        self.window.show()


    def open_window(self):
        self.window =QtWidgets.QMainWindow()
        ui = Ui_ServiceWindow()
        ui.setupUi(self.window, LoginWindow)
        ui.set_information_profile(self.user_name)
        ui.set_user_name(self.user_name)
        self.window.show()
        LoginWindow.hide()

    def setupUi(self, LoginWindow):
        LoginWindow.setObjectName("LoginWindow")
        LoginWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(LoginWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(400, 110, 250, 50))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(400, 200, 250, 50))
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(140, 110, 180, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(140, 200, 181, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(550, 270, 101, 51))
        self.radioButton.toggled.connect(lambda : self.btnstae(self.radioButton))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(400, 270, 141, 51))
        self.radioButton_2.toggled.connect(lambda : self.btnstae(self.radioButton_2))

        font = QtGui.QFont()
        font.setPointSize(14)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.centralwidget, clicked = lambda :self.open_Create_Account_Customer_window())
        self.commandLinkButton.setGeometry(QtCore.QRect(380, 450, 381, 71))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(18)
        self.commandLinkButton.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/user-3295.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.commandLinkButton.setIcon(icon)
        self.commandLinkButton.setIconSize(QtCore.QSize(50, 50))
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda : self.click_login())
        self.pushButton.setGeometry(QtCore.QRect(400, 350, 201, 51))
        font = QtGui.QFont()
        font.setFamily("Jokerman")
        font.setPointSize(16)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        LoginWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(LoginWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        LoginWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(LoginWindow)
        self.statusbar.setObjectName("statusbar")
        LoginWindow.setStatusBar(self.statusbar)

        self.retranslateUi(LoginWindow)
        QtCore.QMetaObject.connectSlotsByName(LoginWindow)

    def retranslateUi(self, LoginWindow):
        _translate = QtCore.QCoreApplication.translate
        LoginWindow.setWindowTitle(_translate("LoginWindow", "LoginWindow"))
        self.label.setText(_translate("LoginWindow", "User Name :"))
        self.label_2.setText(_translate("LoginWindow", "Password :"))
        self.radioButton.setText(_translate("LoginWindow", "Admin"))
        self.radioButton_2.setText(_translate("LoginWindow", "Customer"))
        self.commandLinkButton.setText(_translate("LoginWindow", "Create an account"))
        self.pushButton.setText(_translate("LoginWindow", "Login"))
        self.user_role = ''

    def btnstae(self, b):
        if b.isChecked():
            self.user_role = b.text()

    @staticmethod
    def show_error(message):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Critical)
        msg.setText("Error")
        msg.setInformativeText(message)
        msg.setWindowTitle("Error")
        msg.exec_()




    def click_login(self):
        if self.radioButton.isChecked() or self.radioButton_2.isChecked():
            self.user_name = self.lineEdit.text()
            self.password = self.lineEdit_2.text()
        else:
            self.show_error("Select your role!")

        if ui.user_role == 'Admin':
            loginadmin = LoginAdmin(self.user_name, self.password)
            correct_or_not_correct_password = loginadmin.correct_username_password()

            if correct_or_not_correct_password == True:
                self.open_windowadmin()
            else:
                #raise AssertionError
                self.show_error(correct_or_not_correct_password)



        if ui.user_role == 'Customer':
            logincustomer = LoginCustomer(self.user_name, self.password)
            correct_or_not_correct_password = logincustomer.correct_username_password()
            if correct_or_not_correct_password == True:
                self.open_window()
            else:
                self.show_error(correct_or_not_correct_password)





import sys

import sys
app = QtWidgets.QApplication(sys.argv)
LoginWindow = QtWidgets.QMainWindow()
ui = Ui_LoginWindow()
ui.setupUi(LoginWindow)
LoginWindow.show()
sys.exit(app.exec_())

'''if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    LoginWindow = QtWidgets.QMainWindow()
    ui = Ui_LoginWindow()
    ui.setupUi(LoginWindow)
    LoginWindow.show()
    sys.exit(app.exec_())'''

