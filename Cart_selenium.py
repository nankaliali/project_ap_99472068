# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Cart.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time
import json

from selenium import webdriver

class Cart:
    def __init__(self, mablagh_be_rial,user_name, date):
        a_file = open(f"F:\\project_ap_99472068\\Users_information\\customer\\{user_name}.json", "r")
        json_object = json.load(a_file)
        a_file.close()
        self.mablgh = mablagh_be_rial
        self.name_of_payer = json_object["first_name"]+' '+json_object["last_name"]
        self.phon_number = json_object["phone_number"]
        self.date_pardakhti = date

    def goto_page(self):
        driver = webdriver.Chrome('chromedriver.exe')  # we download it before
        driver.get('https://idpay.ir/projectap-99472068')
        mablagh_pardakhti = driver.find_element_by_xpath('//*[@class="form-text required" and @title="مبلغ (ضروری)"]')
        mablagh_pardakhti.send_keys(self.mablgh)

        name_of_payer = driver.find_element_by_xpath('//*[@class="form-text required" and @title="نام و نام خانوادگی پرداخت کننده (ضروری)"]')
        name_of_payer.send_keys(self.name_of_payer)

        phon_number_reside_pardakht = driver.find_element_by_xpath('//*[@class="form-text" and @title="موبایل شما برای پیامک رسید پرداخت (اختیاری) "]')
        phon_number_reside_pardakht.send_keys(self.phon_number)

        driver.find_element_by_xpath('//*[@class="form-submit"]').click()

        driver.find_element_by_xpath('//*[@class="secondary button radius form-submit"]').click()
        time.sleep(5)











from PyQt5 import QtCore, QtGui, QtWidgets

class ReadOnly(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        return


class Ui_CartWindow(object):
    def initialize_information(self, user_name, date):
        self.user_name = user_name
        self.date = date
        self.show_factor()


    def setupUi(self, CartWindow):
        CartWindow.setObjectName("CartWindow")
        CartWindow.resize(740, 600)
        self.centralwidget = QtWidgets.QWidget(CartWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.centralwidget, clicked = lambda : self.go_to_page_for_pay())
        self.commandLinkButton.setGeometry(QtCore.QRect(10, 470, 341, 71))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(16)
        self.commandLinkButton.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/pay.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.commandLinkButton.setIcon(icon)
        self.commandLinkButton.setIconSize(QtCore.QSize(60, 60))
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget.setGeometry(QtCore.QRect(40, 10, 660, 370))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)

        self.commandLinkButton_2 = QtWidgets.QCommandLinkButton(self.centralwidget, clicked = lambda : self.delete_it())
        self.commandLinkButton_2.setGeometry(QtCore.QRect(550, 390, 151, 71))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(14)
        self.commandLinkButton_2.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.commandLinkButton_2.setIcon(icon1)
        self.commandLinkButton_2.setIconSize(QtCore.QSize(60, 60))
        self.commandLinkButton_2.setObjectName("commandLinkButton_2")
        CartWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(CartWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 740, 26))
        self.menubar.setObjectName("menubar")
        CartWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(CartWindow)
        self.statusbar.setObjectName("statusbar")
        CartWindow.setStatusBar(self.statusbar)

        self.retranslateUi(CartWindow)
        QtCore.QMetaObject.connectSlotsByName(CartWindow)

    def retranslateUi(self, CartWindow):
        _translate = QtCore.QCoreApplication.translate
        CartWindow.setWindowTitle(_translate("CartWindow", "CartWindow"))
        self.commandLinkButton.setText(_translate("CartWindow", "Final payment "))
        self.commandLinkButton_2.setText(_translate("CartWindow", "Delete"))

    def go_to_page_for_pay(self):
        cart_obj = Cart(self.total_payment, self.user_name, self.date)
        cart_obj.goto_page()

    @staticmethod
    def show_error(message, type_mesasge, user_name):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(type_mesasge)
        msg.setText(f"Hello {user_name}")
        msg.setInformativeText(message)
        msg.setWindowTitle("Message")
        msg.exec_()

    @staticmethod
    def tabdil_miladi_be_shamsi(day, month, year):
        return f"{year:02d}/{month:02d}/{day:02d}"

    def read_inforamtion_file_ordeer(self, information):
        self.information = information

    def show_factor(self):

        information = self.information
        self.count_row = len(information)
        self.tableWidget.setRowCount(len(information) + 2)
        self.tableWidget.setColumnCount(4)
        item = QtWidgets.QTableWidgetItem(f"Name Food")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem(item))
        # self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers) #&&&&
        item = QtWidgets.QTableWidgetItem(f"Price of each food")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem(item))
        item = QtWidgets.QTableWidgetItem(f"Number of available")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(0, 2, QtWidgets.QTableWidgetItem(item))
        item = QtWidgets.QTableWidgetItem("payment")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(0, 3, QtWidgets.QTableWidgetItem(item))
        '''
        readonly = ReadOnly(self)
        self.tableWidget.setItemDelegateForColumn(0, readonly)
        self.tableWidget.setItemDelegateForColumn(1, readonly)
        self.tableWidget.setItemDelegateForColumn(2, readonly)
        '''

        index = 1
        total_payment = 0
        list_key_mojaz = []
        for key in information.keys():
            if information[key]["numbers of orders"] == 0:
                pass
            else:
                list_key_mojaz.append(key)

        for key in list_key_mojaz:
            if information[key]['numbers of orders'] == 0:
                pass
            else:
                item = QtWidgets.QTableWidgetItem(key)
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableWidget.setItem(index, 0, item)
                item = QtWidgets.QTableWidgetItem(f"{information[key]['cost each food']}")
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableWidget.setItem(index, 1, item)
                item = QtWidgets.QTableWidgetItem(f"{information[key]['numbers of orders']}")
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableWidget.setItem(index, 2, item)
                item = QtWidgets.QTableWidgetItem(f"{information[key]['numbers of orders'] * information[key]['cost each food']}" )
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableWidget.setItem(index, 3, item)
                total_payment += information[key]['numbers of orders'] * information[key]['cost each food']

            index += 1
        self.total_payment = total_payment
        item = QtWidgets.QTableWidgetItem(f"{self.total_payment}")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setItem(index, 3, item)
        self.tableWidget.setColumnWidth(0, 100)
        self.tableWidget.setColumnWidth(1, 150)
        self.tableWidget.setColumnWidth(2, 180)
        self.tableWidget.setColumnWidth(3, 250)
        self.index = index




    def delete_a_order_from_file(self,name_food):
        date = str(self.tabdil_miladi_be_shamsi((int(self.date[2])), int(self.date[1]), int(self.date[0])))
        date = date.replace('/','.')
        a_file = open(f"F:\\project_ap_99472068\\orders\\{self.user_name}\\{date}.json", "r")
        json_object = json.load(a_file)
        a_file.close()

        json_object.pop(name_food)

        a_file = open(f"F:\\project_ap_99472068\\orders\\{self.user_name}\\{date}.json", "w")
        json.dump(json_object, a_file)
        a_file.close()

        a_file = open(f"F:\\project_ap_99472068\\orders\\{self.user_name}\\{date}.json", "r")
        json_object = json.load(a_file)

        total_payment = 0
        for key in json_object:
            total_payment += json_object[key]["payment"]

        item = QtWidgets.QTableWidgetItem(f"{total_payment}")
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.index -= 1
        self.tableWidget.setItem(self.index, 3, item)


    def delete_it(self):
        row_selected_to_remove = self.tableWidget.currentRow()
        name_food = self.tableWidget.item(row_selected_to_remove,0).text()
        self.tableWidget.removeRow(row_selected_to_remove)
        self.delete_a_order_from_file(name_food)







if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    CartWindow = QtWidgets.QMainWindow()
    ui = Ui_CartWindow()
    ui.setupUi(CartWindow)
    CartWindow.show()
    sys.exit(app.exec_())
